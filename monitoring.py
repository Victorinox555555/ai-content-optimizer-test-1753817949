"""
Performance monitoring and logging module for Test-monitoring_setup
Generated by QWEN-GPT-AGI autonomous SaaS factory
"""

import os
import json
import time
import sqlite3
import logging
from datetime import datetime
from functools import wraps

class PerformanceMonitor:
    def __init__(self, db_path: str = "monitoring.db"):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        """Initialize monitoring database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS performance_metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                endpoint TEXT NOT NULL,
                method TEXT NOT NULL,
                response_time REAL NOT NULL,
                status_code INTEGER,
                user_id INTEGER,
                ip_address TEXT,
                user_agent TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS error_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                level TEXT NOT NULL,
                message TEXT NOT NULL,
                traceback TEXT,
                endpoint TEXT,
                user_id INTEGER,
                ip_address TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_performance_endpoint ON performance_metrics(endpoint)
        """)
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_performance_timestamp ON performance_metrics(timestamp)
        """)
        conn.commit()
        conn.close()
    
    def log_performance(self, endpoint: str, method: str, response_time: float, 
                       status_code: int, user_id: int = None, ip_address: str = None, 
                       user_agent: str = None):
        """Log performance metrics"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO performance_metrics 
            (endpoint, method, response_time, status_code, user_id, ip_address, user_agent)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (endpoint, method, response_time, status_code, user_id, ip_address, user_agent))
        conn.commit()
        conn.close()
    
    def log_error(self, level: str, message: str, traceback: str = None, 
                  endpoint: str = None, user_id: int = None, ip_address: str = None):
        """Log error information"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO error_logs (level, message, traceback, endpoint, user_id, ip_address)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (level, message, traceback, endpoint, user_id, ip_address))
        conn.commit()
        conn.close()
    
    def get_performance_stats(self, hours: int = 24):
        """Get performance statistics for the last N hours"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT 
                endpoint,
                COUNT(*) as request_count,
                AVG(response_time) as avg_response_time,
                MAX(response_time) as max_response_time,
                MIN(response_time) as min_response_time
            FROM performance_metrics 
            WHERE timestamp > datetime('now', '-' || ? || ' hours')
            GROUP BY endpoint
            ORDER BY request_count DESC
        """, (hours,))
        results = cursor.fetchall()
        conn.close()
        return [{
            'endpoint': row[0],
            'request_count': row[1],
            'avg_response_time': round(row[2], 3),
            'max_response_time': round(row[3], 3),
            'min_response_time': round(row[4], 3)
        } for row in results]

monitor = PerformanceMonitor()

def track_performance(f):
    """Decorator to track endpoint performance"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        start_time = time.time()
        
        try:
            result = f(*args, **kwargs)
            status_code = getattr(result, 'status_code', 200)
        except Exception as e:
            status_code = 500
            monitor.log_error('ERROR', str(e), endpoint='unknown')
            raise
        finally:
            response_time = time.time() - start_time
            monitor.log_performance(
                endpoint='unknown',
                method='GET',
                response_time=response_time,
                status_code=status_code
            )
        
        return result
    return decorated_function

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
