"""
Stripe payment processing module for Test-stripe_charge
Generated by QWEN-GPT-AGI autonomous SaaS factory
"""

import stripe
from stripe.error import InvalidRequestError
import os
import json
import sqlite3
from datetime import datetime, timedelta
from flask import request, jsonify, session

stripe.api_key = os.getenv('STRIPE_SECRET_KEY')

class StripePaymentManager:
    def __init__(self, db_path="payments.db"):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        """Initialize payments database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                stripe_customer_id TEXT,
                stripe_subscription_id TEXT,
                plan_type TEXT DEFAULT 'free',
                status TEXT DEFAULT 'active',
                current_period_start TIMESTAMP,
                current_period_end TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                stripe_payment_intent_id TEXT,
                amount INTEGER,
                currency TEXT DEFAULT 'usd',
                status TEXT,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()
        conn.close()
    
    def create_customer(self, user_id: int, email: str, name: str = "") -> dict:
        """Create Stripe customer"""
        try:
            customer = stripe.Customer.create(
                email=email,
                name=name,
                metadata={'user_id': str(user_id)}
            )
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                INSERT OR REPLACE INTO subscriptions (user_id, stripe_customer_id)
                VALUES (?, ?)
            """, (user_id, customer.id))
            conn.commit()
            conn.close()
            
            return {"success": True, "customer_id": customer.id}
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def create_checkout_session(self, price_id: str) -> dict:
        """Create Stripe checkout session"""
        try:
            try:
                checkout_session = stripe.checkout.Session.create(
                    payment_method_types=['card'],
                    line_items=[{
                        'price': price_id,
                        'quantity': 1,
                    }],
                    mode='subscription',
                    success_url='https://your-domain.com/success?session_id={CHECKOUT_SESSION_ID}',
                    cancel_url='https://your-domain.com/cancel',
                )
            except InvalidRequestError as e:
                if "recurring price" in str(e):
                    checkout_session = stripe.checkout.Session.create(
                        payment_method_types=['card'],
                        line_items=[{
                            'price': price_id,
                            'quantity': 1,
                        }],
                        mode='payment',
                        success_url='https://your-domain.com/success?session_id={CHECKOUT_SESSION_ID}',
                        cancel_url='https://your-domain.com/cancel',
                    )
                else:
                    raise e
            
            return {
                "success": True,
                "checkout_url": checkout_session.url,
                "session_id": checkout_session.id
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}

    def create_subscription(self, user_id: int, price_id: str) -> dict:
        """Create Stripe subscription"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT stripe_customer_id FROM subscriptions WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            conn.close()
            
            if not result:
                return {"success": False, "error": "Customer not found"}
            
            customer_id = result[0]
            
            subscription = stripe.Subscription.create(
                customer=customer_id,
                items=[{'price': price_id}],
                payment_behavior='default_incomplete',
                expand=['latest_invoice.payment_intent'],
            )
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE subscriptions 
                SET stripe_subscription_id = ?, 
                    plan_type = 'premium',
                    status = ?,
                    current_period_start = ?,
                    current_period_end = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (
                subscription.id,
                subscription.status,
                datetime.fromtimestamp(subscription.current_period_start),
                datetime.fromtimestamp(subscription.current_period_end),
                user_id
            ))
            conn.commit()
            conn.close()
            
            return {
                "success": True,
                "subscription_id": subscription.id,
                "client_secret": subscription.latest_invoice.payment_intent.client_secret
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def create_payment_intent(self, user_id: int, amount: int, description: str) -> dict:
        """Create one-time payment intent"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT stripe_customer_id FROM subscriptions WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            conn.close()
            
            customer_id = result[0] if result else None
            
            intent = stripe.PaymentIntent.create(
                amount=amount,
                currency='usd',
                customer=customer_id,
                description=description,
                metadata={'user_id': str(user_id)}
            )
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO payments (user_id, stripe_payment_intent_id, amount, status, description)
                VALUES (?, ?, ?, ?, ?)
            """, (user_id, intent.id, amount, intent.status, description))
            conn.commit()
            conn.close()
            
            return {
                "success": True,
                "client_secret": intent.client_secret,
                "payment_intent_id": intent.id
            }
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def handle_webhook(self, payload: str, sig_header: str) -> dict:
        """Handle Stripe webhook events"""
        try:
            endpoint_secret = os.getenv('STRIPE_WEBHOOK_SECRET', '')
            event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
            
            if event['type'] == 'payment_intent.succeeded':
                payment_intent = event['data']['object']
                user_id = int(payment_intent['metadata']['user_id'])
                
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE payments 
                    SET status = 'succeeded' 
                    WHERE stripe_payment_intent_id = ?
                """, (payment_intent['id'],))
                conn.commit()
                conn.close()
                
            elif event['type'] == 'invoice.payment_succeeded':
                invoice = event['data']['object']
                subscription_id = invoice['subscription']
                
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE subscriptions 
                    SET status = 'active', updated_at = CURRENT_TIMESTAMP
                    WHERE stripe_subscription_id = ?
                """, (subscription_id,))
                conn.commit()
                conn.close()
            
            return {"success": True, "event_type": event['type']}
            
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def get_user_subscription(self, user_id: int) -> dict:
        """Get user's current subscription status"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT plan_type, status, current_period_end 
                FROM subscriptions WHERE user_id = ?
            """, (user_id,))
            result = cursor.fetchone()
            conn.close()
            
            if result:
                plan_type, status, period_end = result
                return {
                    "plan_type": plan_type,
                    "status": status,
                    "period_end": period_end,
                    "is_premium": plan_type != 'free' and status == 'active'
                }
            else:
                return {"plan_type": "free", "status": "none", "is_premium": False}
                
        except Exception as e:
            return {"error": str(e)}

payment_manager = StripePaymentManager()

PRICING_PLANS = {
    'basic': {
        'name': 'Basic Plan',
        'price': 999,  # $9.99 in cents
        'price_id': 'price_1RcdcyEfbTvI2h4o4PVLTykg',  # Using actual Stripe price ID from user's env
        'features': ['AI Content Optimization', 'Basic Analytics', 'Email Support']
    },
    'premium': {
        'name': 'Premium Plan', 
        'price': 2999,  # $29.99 in cents
        'price_id': 'price_1RcdcyEfbTvI2h4o4PVLTykg',  # Same price ID for now, user can create additional plans
        'features': ['Everything in Basic', 'Advanced Analytics', 'Priority Support', 'Custom Integrations']
    }
}
