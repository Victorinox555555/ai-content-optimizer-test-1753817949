"""
Twilio SMS alert system for multi-exchange price monitoring
Generated by QWEN-GPT-AGI autonomous SaaS factory
"""

import os
from typing import Dict, List, Optional
from datetime import datetime

class TwilioAlertSystem:
    def __init__(self):
        self.account_sid = os.getenv('TWILIO_ACCOUNT_SID', 'test_sid')
        self.auth_token = os.getenv('TWILIO_AUTH_TOKEN', 'test_token')
        self.phone_number = os.getenv('TWILIO_PHONE_NUMBER', '+1234567890')
        self.alert_history = []
    
    def send_price_alert(self, to_number: str, coin_name: str, price: float, 
                        exchange: str, alert_type: str = "price_change") -> Dict:
        """Send SMS price alert"""
        try:
            message_body = self._format_alert_message(coin_name, price, exchange, alert_type)
            
            alert_record = {
                'to_number': to_number,
                'message': message_body,
                'coin_name': coin_name,
                'price': price,
                'exchange': exchange,
                'alert_type': alert_type,
                'timestamp': datetime.now().isoformat(),
                'status': 'sent'
            }
            
            self.alert_history.append(alert_record)
            
            return {
                'success': True,
                'message_id': f"mock_msg_{len(self.alert_history)}",
                'status': 'sent',
                'to': to_number,
                'body': message_body
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'to': to_number
            }
    
    def send_multi_exchange_alert(self, to_number: str, coin_name: str, 
                                 exchange_prices: Dict[str, float]) -> List[Dict]:
        """Send alerts for price differences across multiple exchanges"""
        results = []
        
        if len(exchange_prices) < 2:
            return [{'success': False, 'error': 'Need at least 2 exchanges for comparison'}]
        
        prices = list(exchange_prices.values())
        max_price = max(prices)
        min_price = min(prices)
        price_diff_percent = ((max_price - min_price) / min_price) * 100
        
        if price_diff_percent > 5.0:
            message = f"ðŸš¨ ARBITRAGE OPPORTUNITY!\n{coin_name}\n"
            for exchange, price in exchange_prices.items():
                message += f"{exchange}: ${price:.4f}\n"
            message += f"Max difference: {price_diff_percent:.2f}%"
            
            result = self.send_sms(to_number, message)
            results.append(result)
        
        return results
    
    def send_sms(self, to_number: str, message: str) -> Dict:
        """Send SMS using Twilio (mock implementation)"""
        try:
            alert_record = {
                'to_number': to_number,
                'message': message,
                'timestamp': datetime.now().isoformat(),
                'status': 'sent'
            }
            
            self.alert_history.append(alert_record)
            
            return {
                'success': True,
                'message_id': f"mock_msg_{len(self.alert_history)}",
                'status': 'sent',
                'to': to_number,
                'body': message
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e),
                'to': to_number
            }
    
    def _format_alert_message(self, coin_name: str, price: float, 
                             exchange: str, alert_type: str) -> str:
        """Format alert message for SMS"""
        if alert_type == "price_target":
            return f"ðŸŽ¯ {coin_name} reached ${price:.4f} on {exchange}!"
        elif alert_type == "price_drop":
            return f"ðŸ“‰ {coin_name} dropped to ${price:.4f} on {exchange}"
        elif alert_type == "price_spike":
            return f"ðŸ“ˆ {coin_name} spiked to ${price:.4f} on {exchange}!"
        else:
            return f"ðŸ’° {coin_name}: ${price:.4f} on {exchange}"
    
    def get_alert_history(self, limit: int = 50) -> List[Dict]:
        """Get recent alert history"""
        return self.alert_history[-limit:]

twilio_alerts = TwilioAlertSystem()
