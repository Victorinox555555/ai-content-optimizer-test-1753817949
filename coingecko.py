"""
CoinGecko API integration module
Generated by QWEN-GPT-AGI autonomous SaaS factory
"""

import requests
import json
from typing import Dict, List, Optional
from datetime import datetime

class CoinGeckoAPI:
    def __init__(self):
        self.base_url = "https://api.coingecko.com/api/v3"
        self.session = requests.Session()
    
    def get_price(self, coin_ids: List[str], vs_currencies: List[str] = ["usd"]) -> Dict:
        """Get current price of cryptocurrencies"""
        try:
            url = f"{self.base_url}/simple/price"
            params = {
                'ids': ','.join(coin_ids),
                'vs_currencies': ','.join(vs_currencies),
                'include_24hr_change': 'true',
                'include_market_cap': 'true',
                'include_24hr_vol': 'true'
            }
            
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def get_trending_coins(self) -> Dict:
        """Get trending cryptocurrencies"""
        try:
            url = f"{self.base_url}/search/trending"
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def get_coin_history(self, coin_id: str, days: int = 7) -> Dict:
        """Get historical price data for a cryptocurrency"""
        try:
            url = f"{self.base_url}/coins/{coin_id}/market_chart"
            params = {
                'vs_currency': 'usd',
                'days': days,
                'interval': 'daily' if days > 1 else 'hourly'
            }
            
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def search_coins(self, query: str) -> Dict:
        """Search for cryptocurrencies"""
        try:
            url = f"{self.base_url}/search"
            params = {'query': query}
            
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def get_market_data(self, coin_id: str) -> Dict:
        """Get detailed market data for a cryptocurrency"""
        try:
            url = f"{self.base_url}/coins/{coin_id}"
            params = {
                'localization': 'false',
                'tickers': 'false',
                'market_data': 'true',
                'community_data': 'false',
                'developer_data': 'false'
            }
            
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.json()
        except Exception as e:
            return {"error": str(e)}

class PriceAlertSystem:
    def __init__(self):
        self.api = CoinGeckoAPI()
        self.alerts = []
    
    def add_alert(self, coin_id: str, target_price: float, alert_type: str = "above"):
        """Add a price alert"""
        alert = {
            'coin_id': coin_id,
            'target_price': target_price,
            'alert_type': alert_type,
            'created_at': datetime.now().isoformat(),
            'triggered': False
        }
        self.alerts.append(alert)
        return alert
    
    def check_alerts(self):
        """Check all active alerts"""
        triggered_alerts = []
        
        for alert in self.alerts:
            if alert['triggered']:
                continue
            
            price_data = self.api.get_price([alert['coin_id']])
            
            if 'error' in price_data:
                continue
            
            current_price = price_data.get(alert['coin_id'], {}).get('usd', 0)
            
            if alert['alert_type'] == 'above' and current_price >= alert['target_price']:
                alert['triggered'] = True
                alert['triggered_at'] = datetime.now().isoformat()
                alert['triggered_price'] = current_price
                triggered_alerts.append(alert)
            elif alert['alert_type'] == 'below' and current_price <= alert['target_price']:
                alert['triggered'] = True
                alert['triggered_at'] = datetime.now().isoformat()
                alert['triggered_price'] = current_price
                triggered_alerts.append(alert)
        
        return triggered_alerts

coingecko_api = CoinGeckoAPI()
price_alert_system = PriceAlertSystem()
