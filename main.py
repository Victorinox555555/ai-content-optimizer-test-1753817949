"""
Main Flask application for Test-deploy_vercel
Generated by QWEN-GPT-AGI autonomous SaaS factory
"""

from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'dev-secret-key-change-in-production')

@app.after_request
def add_security_headers(response):
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
    response.headers['Content-Security-Policy'] = "default-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://cdn.tailwindcss.com"
    return response

try:
    from auth import auth_manager, login_required
    from stripe_payments import payment_manager, PRICING_PLANS
    from openai_optimizer import OpenAIContentOptimizer
except ImportError:
    auth_manager = None
    payment_manager = None
    PRICING_PLANS = {}
    OpenAIContentOptimizer = None
    
    def login_required(f):
        return f

ai_optimizer = OpenAIContentOptimizer() if OpenAIContentOptimizer else None

@app.route('/')
def index():
    """Landing page"""
    return render_template('index.html', 
                         app_name="Test-deploy_vercel", 
                         description="A test micro-SaaS application for testing skills")

@app.route('/login')
def login_page():
    """Login page"""
    return render_template('login.html')

@app.route('/signup')
def signup_page():
    """Signup page"""
    return render_template('signup.html')

@app.route('/pricing')
def pricing_page():
    """Pricing page"""
    return render_template('pricing.html', plans=PRICING_PLANS)

@app.route('/dashboard')
@login_required
def dashboard():
    """User dashboard"""
    user_data = getattr(request, 'current_user', {})
    subscription = payment_manager.get_user_subscription(user_data.get('user_id', 0)) if payment_manager else {'plan_type': 'free'}
    return render_template('dashboard.html', user=user_data, subscription=subscription)

@app.route('/api/signup', methods=['POST'])
def api_signup():
    """User signup API"""
    if not auth_manager:
        return jsonify({"success": False, "message": "Authentication not configured"}), 500
    
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    
    if not email or not password:
        return jsonify({"success": False, "message": "Email and password required"}), 400
    
    result = auth_manager.create_user(email, password)
    return jsonify(result)

@app.route('/api/login', methods=['POST'])
def api_login():
    """User login API"""
    if not auth_manager:
        return jsonify({"success": False, "message": "Authentication not configured"}), 500
    
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')
    
    if not email or not password:
        return jsonify({"success": False, "message": "Email and password required"}), 400
    
    result = auth_manager.authenticate_user(email, password)
    if result.get('success'):
        session['session_id'] = result['session_id']
    
    return jsonify(result)

@app.route('/api/health')
def health_check():
    """Health check endpoint for monitoring and deployment verification"""
    try:
        if auth_manager:
            test_result = auth_manager.authenticate_user("test@nonexistent.com", "test")
            db_status = "connected"
        else:
            db_status = "not_configured"
        
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.utcnow().isoformat(),
            'version': '1.0.0',
            'database': db_status,
            'services': {
                'authentication': 'operational' if auth_manager else 'not_configured',
                'payments': 'operational' if payment_manager else 'not_configured',
                'ai_optimization': 'operational'
            }
        }), 200
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.utcnow().isoformat()
        }), 503

@app.route('/api/create-checkout-session', methods=['POST'])
def api_create_checkout_session():
    """Create Stripe checkout session"""
    if not payment_manager:
        return jsonify({"success": False, "error": "Payment processing not configured"}), 500
    
    data = request.get_json()
    plan = data.get('plan', 'basic')
    
    if plan not in PRICING_PLANS:
        return jsonify({"success": False, "error": "Invalid plan"}), 400
    
    price_id = PRICING_PLANS[plan]['price_id']
    result = payment_manager.create_checkout_session(price_id)
    return jsonify(result)

@app.route('/api/create-subscription', methods=['POST'])
@login_required
def api_create_subscription():
    """Create Stripe subscription"""
    if not payment_manager:
        return jsonify({"success": False, "error": "Payment processing not configured"}), 500
    
    data = request.get_json()
    plan = data.get('plan', 'basic')
    user_id = request.current_user.get('user_id')
    
    if plan not in PRICING_PLANS:
        return jsonify({"success": False, "error": "Invalid plan"}), 400
    
    price_id = PRICING_PLANS[plan]['price_id']
    result = payment_manager.create_subscription(user_id, price_id)
    return jsonify(result)

@app.route('/api/optimize', methods=['POST'])
@login_required
def api_optimize_content():
    """AI content optimization endpoint"""
    if not ai_optimizer:
        return jsonify({"success": False, "error": "AI optimization not configured"}), 500
    
    data = request.get_json()
    content = data.get('content', '').strip()
    target_audience = data.get('target_audience', 'general')
    
    if not content:
        return jsonify({"success": False, "error": "Content is required"}), 400
    
    if len(content) > 5000:
        return jsonify({"success": False, "error": "Content too long (max 5000 characters)"}), 400
    
    result = ai_optimizer.optimize_content(content, target_audience)
    
    if "error" in result:
        return jsonify({"success": False, "error": result["error"]}), 500
    
    return jsonify({
        "success": True,
        "original": result["original"],
        "optimized": result["optimized"],
        "improvements": result["improvements"],
        "engagement_score": result["engagement_score"]
    })

@app.route('/api/webhook', methods=['POST'])
def stripe_webhook():
    """Handle Stripe webhooks"""
    if not payment_manager:
        return jsonify({"error": "Payment processing not configured"}), 500
    
    payload = request.get_data(as_text=True)
    sig_header = request.headers.get('Stripe-Signature')
    
    result = payment_manager.handle_webhook(payload, sig_header)
    return jsonify(result)

@app.errorhandler(404)
def not_found(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
